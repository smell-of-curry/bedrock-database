{
  "version": 3,
  "sources": ["../src/index.ts", "../src/config/database.ts", "../src/utils.ts"],
  "sourcesContent": ["import {\r\n  DynamicPropertiesDefinition,\r\n  EntityTypes,\r\n  world,\r\n} from \"@minecraft/server\";\r\nimport { ENTITY_IDENTIFIER, ENTITY_LOCATION } from \"./config/database\";\r\nimport { DIMENSIONS } from \"./utils.js\";\r\n\r\nworld.events.worldInitialize.subscribe(({ propertyRegistry }) => {\r\n  /**\r\n   * Loads Ticking Area\r\n   */\r\n  DIMENSIONS.overworld.runCommandAsync(\r\n    `tickingarea add ${ENTITY_LOCATION.x} ${ENTITY_LOCATION.y} ${ENTITY_LOCATION.z} ${ENTITY_LOCATION.x} ${ENTITY_LOCATION.y} ${ENTITY_LOCATION.z} db true`\r\n  );\r\n\r\n  let def = new DynamicPropertiesDefinition();\r\n  def.defineString(\"tableName\", 30);\r\n  def.defineNumber(\"index\");\r\n  propertyRegistry.registerEntityTypeDynamicProperties(\r\n    def,\r\n    EntityTypes.get(ENTITY_IDENTIFIER)\r\n  );\r\n});\r\n", "import { BlockLocation } from \"@minecraft/server\";\n\n/*\n|--------------------------------------------------------------------------\n| Max Database string size\n|--------------------------------------------------------------------------\n|\n| Here is the max database save size meaning when a save gets made\n| it tests the size of that save and splits up the save depending on this\n| Size. It's related to Minecraft's 32k bit limit.\n|\n*/\nexport const MAX_DATABASE_STRING_SIZE = 32000;\n\n/*\n|--------------------------------------------------------------------------\n| Max Lore Array Size\n|--------------------------------------------------------------------------\n|\n| Here is the max database lore size meaning when a save gets made\n| it tests the size of that lore array is bigger than this then splits up\n| the length. It's related to int32 NBT storage of lists.\n|\n*/\nexport const MAX_LORE_ARRAY_SIZE = 2000000;\n\n/*\n|--------------------------------------------------------------------------\n| Entity Id\n|--------------------------------------------------------------------------\n|\n| This is the entity id of the database this is what stores the information\n| of the database on its nameTag\n|\n*/\nexport const ENTITY_IDENTIFIER = \"database:database\";\n\n/*\n|--------------------------------------------------------------------------\n| Entity Spawn Location\n|--------------------------------------------------------------------------\n|\n| This is the spawn location of the database entities there will be\n| Multiple entities at this location for each chunk\n|\n*/\nexport const ENTITY_LOCATION = new BlockLocation(0, -64, 0);\n\n/*\n|--------------------------------------------------------------------------\n| Entity's INVENTORY_SIZE\n|--------------------------------------------------------------------------\n|\n| The max amount of items this entity can store in its inventory\n|\n*/\nexport const INVENTORY_SIZE = 128;\n\n/*\n|--------------------------------------------------------------------------\n| Back Up Name\n|--------------------------------------------------------------------------\n|\n| The structure file name for the backed up data in this database\n|\n*/\nexport const BACKUP_NAME = \"database:entities\";\n", "import { MinecraftDimensionTypes, system, world } from \"@minecraft/server\";\r\n\r\n/**\r\n * This is to reduce lag when grabbing dimensions keep them set and pre-defined\r\n */\r\nexport const DIMENSIONS = {\r\n  overworld: world.getDimension(MinecraftDimensionTypes.overworld),\r\n  nether: world.getDimension(MinecraftDimensionTypes.nether),\r\n  theEnd: world.getDimension(MinecraftDimensionTypes.theEnd),\r\n  \"minecraft:overworld\": world.getDimension(MinecraftDimensionTypes.overworld),\r\n  \"minecraft:nether\": world.getDimension(MinecraftDimensionTypes.nether),\r\n  \"minecraft:the_end\": world.getDimension(MinecraftDimensionTypes.theEnd),\r\n};\r\n\r\n/**\r\n * Awaits till entities spawn in on world load\r\n * @returns Promise when they load in\r\n */\r\nexport async function awaitEntitiesLoad(): Promise<void> {\r\n  return new Promise((resolve) => {\r\n    let s = system.runSchedule(async () => {\r\n      try {\r\n        await DIMENSIONS.overworld.runCommandAsync(`testfor @a`);\r\n        system.clearRunSchedule(s);\r\n        resolve();\r\n      } catch (error) {}\r\n    }, 5);\r\n  });\r\n}\r\n\r\n/**\r\n * Splits a string into an array of arrays of strings with a maximum length of 32767 characters per string in the innermost array.\r\n * @param str The input string to split.\r\n * @param maxLength Max Length of the 1st array\r\n * @param subArraysMaxLength Max Length of the strings in the 2d array\r\n * @returns A two-dimensional array of strings, where each inner array has a maximum length of 2147483647.\r\n */\r\nexport function splitString(\r\n  str: string,\r\n  maxLength: number,\r\n  subArraysMaxLength: number\r\n): string[][] {\r\n  const subStrings: string[] = [];\r\n  for (let i = 0; i < str.length; i += maxLength) {\r\n    subStrings.push(str.slice(i, i + maxLength));\r\n  }\r\n\r\n  const subArrays: string[][] = [];\r\n  for (const subString of subStrings) {\r\n    subArrays.push(\r\n      Array.from(\r\n        { length: Math.ceil(subString.length / subArraysMaxLength) },\r\n        (_, i) =>\r\n          subString.slice(i * subArraysMaxLength, (i + 1) * subArraysMaxLength)\r\n      )\r\n    );\r\n  }\r\n\r\n  return subArrays;\r\n}\r\n\r\n/**\r\n * Concatenates the strings in a two-dimensional array of strings into a single string.\r\n * @param strArrays A two-dimensional array of strings to concatenate.\r\n * @returns A single string containing the concatenated strings.\r\n */\r\nexport function joinStringArrays(strArrays: string[][]): string {\r\n  return strArrays.reduce((acc, cur) => acc + cur.join(\"\"), \"\");\r\n}\r\n"],
  "mappings": ";AAAA;AAAA,EACE;AAAA,EACA;AAAA,EACA,SAAAA;AAAA,OACK;;;ACJP,SAAS,qBAAqB;AAmCvB,IAAM,oBAAoB;AAW1B,IAAM,kBAAkB,IAAI,cAAc,GAAG,KAAK,CAAC;;;AC9C1D,SAAS,yBAAyB,QAAQ,aAAa;AAKhD,IAAM,aAAa;AAAA,EACxB,WAAW,MAAM,aAAa,wBAAwB,SAAS;AAAA,EAC/D,QAAQ,MAAM,aAAa,wBAAwB,MAAM;AAAA,EACzD,QAAQ,MAAM,aAAa,wBAAwB,MAAM;AAAA,EACzD,uBAAuB,MAAM,aAAa,wBAAwB,SAAS;AAAA,EAC3E,oBAAoB,MAAM,aAAa,wBAAwB,MAAM;AAAA,EACrE,qBAAqB,MAAM,aAAa,wBAAwB,MAAM;AACxE;;;AFJAC,OAAM,OAAO,gBAAgB,UAAU,CAAC,EAAE,iBAAiB,MAAM;AAI/D,aAAW,UAAU;AAAA,IACnB,mBAAmB,gBAAgB,KAAK,gBAAgB,KAAK,gBAAgB,KAAK,gBAAgB,KAAK,gBAAgB,KAAK,gBAAgB;AAAA,EAC9I;AAEA,MAAI,MAAM,IAAI,4BAA4B;AAC1C,MAAI,aAAa,aAAa,EAAE;AAChC,MAAI,aAAa,OAAO;AACxB,mBAAiB;AAAA,IACf;AAAA,IACA,YAAY,IAAI,iBAAiB;AAAA,EACnC;AACF,CAAC;",
  "names": ["world", "world"]
}
